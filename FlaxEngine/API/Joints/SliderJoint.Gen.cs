// Copyright (c) 2012-2019 Wojciech Figat. All rights reserved.
// This code was generated by a tool. Changes to this file may cause
// incorrect behavior and will be lost if the code is regenerated.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
    /// <summary>
    /// Physics joint that removes all but a single translational degree of freedom. Bodies are allowed to move along a single axis.
    /// </summary>
    [Serializable]
    public sealed partial class SliderJoint : Joint
    {
        /// <summary>
        /// Creates new <see cref="SliderJoint"/> object.
        /// </summary>
        private SliderJoint() : base()
        {
        }

        /// <summary>
        /// Creates new instance of <see cref="SliderJoint"/> object.
        /// </summary>
        /// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static SliderJoint New()
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_Create(typeof(SliderJoint)) as SliderJoint;
#endif
        }

        /// <summary>
        /// Gets or sets the joint mode flags. Controls joint behaviour.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(100), DefaultValue(SliderJointFlag.Limit), EditorDisplay("Joint"), Tooltip("The joint mode flags. Controls joint behaviour.")]
        public SliderJointFlag Flags
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetFlags(unmanagedPtr); }
            set { Internal_SetFlags(unmanagedPtr, value); }
#endif
        }

        /// <summary>
        /// Gets or sets the joint limit properties.
        /// </summary>
        /// <remarks>
        /// Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
        /// </remarks>
        [UnmanagedCall]
        [EditorOrder(110), EditorDisplay("Joint"), Tooltip("The joint limit properties.")]
        public LimitLinearRange Limit
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { LimitLinearRange resultAsRef; Internal_GetLimit(unmanagedPtr, out resultAsRef); return resultAsRef; }
            set { Internal_SetLimit(unmanagedPtr, ref value); }
#endif
        }

        /// <summary>
        /// Gets the current displacement of the joint along its axis.
        /// </summary>
        [UnmanagedCall]
        public float CurrentPosition
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetCurrentPosition(unmanagedPtr); }
#endif
        }

        /// <summary>
        /// Gets the current velocity of the joint along its axis.
        /// </summary>
        [UnmanagedCall]
        public float CurrentVelocity
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetCurrentVelocity(unmanagedPtr); }
#endif
        }

        #region Internal Calls

#if !UNIT_TEST_COMPILANT
        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern SliderJointFlag Internal_GetFlags(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetFlags(IntPtr obj, SliderJointFlag val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetLimit(IntPtr obj, out LimitLinearRange resultAsRef);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetLimit(IntPtr obj, ref LimitLinearRange val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern float Internal_GetCurrentPosition(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern float Internal_GetCurrentVelocity(IntPtr obj);
#endif

        #endregion
    }
}
