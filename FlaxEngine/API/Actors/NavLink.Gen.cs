// Copyright (c) 2012-2019 Wojciech Figat. All rights reserved.
// This code was generated by a tool. Changes to this file may cause
// incorrect behavior and will be lost if the code is regenerated.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
    /// <summary>
    /// The off-mesh link objects used to define a custom point-to-point edge within the navigation graph. An off-mesh connection is a user defined traversable connection made up to two vertices, at least one of which resides within a navigation mesh polygon allowing movement outside the navigation mesh.
    /// </summary>
    [Serializable]
    public sealed partial class NavLink : Actor
    {
        /// <summary>
        /// Creates new <see cref="NavLink"/> object.
        /// </summary>
        private NavLink() : base()
        {
        }

        /// <summary>
        /// Creates new instance of <see cref="NavLink"/> object.
        /// </summary>
        /// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static NavLink New()
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_Create(typeof(NavLink)) as NavLink;
#endif
        }

        /// <summary>
        /// Gets or sets the start location which transform is representing link start position. It is defined in local-space of the actor.
        /// </summary>
        [UnmanagedCall]
        [EditorDisplay("Nav Link"), DefaultValue(typeof(Vector3), "0,0,0"), EditorOrder(0), Tooltip("Start location which transform is representing link start position. It is defined in local-space of the actor.")]
        public Vector3 Start
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { Vector3 resultAsRef; Internal_GetStart(unmanagedPtr, out resultAsRef); return resultAsRef; }
            set { Internal_SetStart(unmanagedPtr, ref value); }
#endif
        }

        /// <summary>
        /// Gets or sets the end location which transform is representing link end position. It is defined in local-space of the actor.
        /// </summary>
        [UnmanagedCall]
        [EditorDisplay("Nav Link"), DefaultValue(typeof(Vector3), "0,0,0"), EditorOrder(10), Tooltip("End location which transform is representing link end position. It is defined in local-space of the actor.")]
        public Vector3 End
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { Vector3 resultAsRef; Internal_GetEnd(unmanagedPtr, out resultAsRef); return resultAsRef; }
            set { Internal_SetEnd(unmanagedPtr, ref value); }
#endif
        }

        /// <summary>
        /// Gets or sets the radius of the agents that can go through the link.
        /// </summary>
        [UnmanagedCall]
        [EditorDisplay("Nav Link"), DefaultValue(30.0f), EditorOrder(20), Tooltip("Radius of the agents that can go through the link.")]
        public float Radius
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetRadius(unmanagedPtr); }
            set { Internal_SetRadius(unmanagedPtr, value); }
#endif
        }

        /// <summary>
        /// Gets or sets the flag used to define links that can be traversed in both directions. When set to false the link can only be traversed from start to end.
        /// </summary>
        [UnmanagedCall]
        [EditorDisplay("Nav Link"), DefaultValue(true), EditorOrder(30), Tooltip("Flag used to define links that can be traversed in both directions. If false the link can only be traversed from start to end.")]
        public bool BiDirectional
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetBiDirectional(unmanagedPtr); }
            set { Internal_SetBiDirectional(unmanagedPtr, value); }
#endif
        }

        #region Internal Calls

#if !UNIT_TEST_COMPILANT
        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetStart(IntPtr obj, out Vector3 resultAsRef);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetStart(IntPtr obj, ref Vector3 val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetEnd(IntPtr obj, out Vector3 resultAsRef);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetEnd(IntPtr obj, ref Vector3 val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern float Internal_GetRadius(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetRadius(IntPtr obj, float val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern bool Internal_GetBiDirectional(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetBiDirectional(IntPtr obj, bool val);
#endif

        #endregion
    }
}
