// Copyright (c) 2012-2020 Wojciech Figat. All rights reserved.
// This code was generated by a tool. Changes to this file may cause
// incorrect behavior and will be lost if the code is regenerated.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
    /// <summary>
    /// Actor that links to the animated model skeleton bone transformation.
    /// </summary>
    [Serializable]
    public sealed partial class BoneSocket : Actor
    {
        /// <summary>
        /// Creates new <see cref="BoneSocket"/> object.
        /// </summary>
        private BoneSocket() : base()
        {
        }

        /// <summary>
        /// Creates new instance of <see cref="BoneSocket"/> object.
        /// </summary>
        /// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static BoneSocket New()
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_Create(typeof(BoneSocket)) as BoneSocket;
#endif
        }

        /// <summary>
        /// Gets or sets the target node name to link to it.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(10), EditorDisplay("Bone Socket"), CustomEditorAlias("FlaxEditor.CustomEditors.Editors.SkeletonNodeEditor"), Tooltip("The name of the node to track its transform.")]
        public String Node
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetNode(unmanagedPtr); }
            set { Internal_SetNode(unmanagedPtr, value); }
#endif
        }

        /// <summary>
        /// Gets or sets the value indicating whenever use the target bone scale. Otherwise won't override the actor scale.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(20), EditorDisplay("Bone Socket"), DefaultValue(false), Tooltip("If checked, the actor will use the target bone scale. Otherwise it won't override the actor scale.")]
        public bool UseScale
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetUseScale(unmanagedPtr); }
            set { Internal_SetUseScale(unmanagedPtr, value); }
#endif
        }

        #region Internal Calls

#if !UNIT_TEST_COMPILANT
        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern String Internal_GetNode(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetNode(IntPtr obj, String val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern bool Internal_GetUseScale(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetUseScale(IntPtr obj, bool val);
#endif

        #endregion
    }
}
