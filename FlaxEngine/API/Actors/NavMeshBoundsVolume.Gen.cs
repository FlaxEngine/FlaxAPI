// Copyright (c) 2012-2019 Wojciech Figat. All rights reserved.
// This code was generated by a tool. Changes to this file may cause
// incorrect behavior and will be lost if the code is regenerated.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
    /// <summary>
    /// A special type of volume that defines the areas of the scene in which navigation meshes are generated.
    /// </summary>
    [Serializable]
    public sealed partial class NavMeshBoundsVolume : Actor
    {
        /// <summary>
        /// Creates new <see cref="NavMeshBoundsVolume"/> object.
        /// </summary>
        private NavMeshBoundsVolume() : base()
        {
        }

        /// <summary>
        /// Creates new instance of <see cref="NavMeshBoundsVolume"/> object.
        /// </summary>
        /// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static NavMeshBoundsVolume New()
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_Create(typeof(NavMeshBoundsVolume)) as NavMeshBoundsVolume;
#endif
        }

        /// <summary>
        /// Gets or sets size of the volume in the local space.
        /// </summary>
        [UnmanagedCall]
        [EditorDisplay("Nav Mesh Bounds"), DefaultValue(typeof(Vector3), "1000,1000,1000"), EditorOrder(0), Tooltip("Volume size")]
        public Vector3 Size
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { Vector3 resultAsRef; Internal_GetSize(unmanagedPtr, out resultAsRef); return resultAsRef; }
            set { Internal_SetSize(unmanagedPtr, ref value); }
#endif
        }

        /// <summary>
        /// Gets the volume bounding box (oriented).
        /// </summary>
        [UnmanagedCall]
        public OrientedBoundingBox OrientedBox
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { OrientedBoundingBox resultAsRef; Internal_GetOrientedBox(unmanagedPtr, out resultAsRef); return resultAsRef; }
#endif
        }

        #region Internal Calls

#if !UNIT_TEST_COMPILANT
        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetSize(IntPtr obj, out Vector3 resultAsRef);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetSize(IntPtr obj, ref Vector3 val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetOrientedBox(IntPtr obj, out OrientedBoundingBox resultAsRef);
#endif

        #endregion
    }
}
