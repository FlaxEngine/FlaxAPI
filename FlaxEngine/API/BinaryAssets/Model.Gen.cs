// Copyright (c) 2012-2020 Wojciech Figat. All rights reserved.
// This code was generated by a tool. Changes to this file may cause
// incorrect behavior and will be lost if the code is regenerated.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
    /// <summary>
    /// Model asset that contains model object made of meshes which can rendered on the GPU.
    /// </summary>
    public sealed partial class Model : BinaryAsset
    {
        /// <summary>
        /// Creates new <see cref="Model"/> object.
        /// </summary>
        private Model() : base()
        {
        }

        /// <summary>
        /// Gets amount of loaded model LODs.
        /// </summary>
        [UnmanagedCall]
        public int LoadedLODs
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetLoadedLODs(unmanagedPtr); }
#endif
        }

        /// <summary>
        /// Gets the model bounding box in local space (from LOD0).
        /// </summary>
        [UnmanagedCall]
        public BoundingBox Box
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { BoundingBox resultAsRef; Internal_GetBox(unmanagedPtr, out resultAsRef); return resultAsRef; }
#endif
        }

        /// <summary>
        /// Gets or sets the minimum screen size to draw model (the bottom limit). Used to cull small models. Set to 0 to disable this feature.
        /// </summary>
        [UnmanagedCall]
        public float MinScreenSize
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetMinScreenSize(unmanagedPtr); }
            set { Internal_SetMinScreenSize(unmanagedPtr, value); }
#endif
        }

        /// <summary>
        /// Saves asset to the file. It must be fully loaded.
        /// </summary>
        /// <remarks>
        /// Supported only in Editor. If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.
        /// </remarks>
        /// <param name="withMeshData">True if save also GPU mesh buffers, otherwise will keep data in storage unmodified. Valid only if saving the same asset to the same location and it's loaded. If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.</param>
        /// <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate model asset.</param>
        /// <returns>True if cannot save data, otherwise false.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public bool Save(bool withMeshData = false, string path = null)
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_Save(unmanagedPtr, withMeshData, path);
#endif
        }

        #region Internal Calls

#if !UNIT_TEST_COMPILANT
        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern int Internal_GetLoadedLODs(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetBox(IntPtr obj, out BoundingBox resultAsRef);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern float Internal_GetMinScreenSize(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetMinScreenSize(IntPtr obj, float val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern bool Internal_Save(IntPtr obj, bool withMeshData, string path);
#endif

        #endregion
    }
}
