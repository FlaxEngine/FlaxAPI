// Copyright (c) 2012-2019 Wojciech Figat. All rights reserved.
// This code was generated by a tool. Changes to this file may cause
// incorrect behavior and will be lost if the code is regenerated.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace FlaxEngine
{
    /// <summary>
    /// Sky light captures the distant parts of the scene and applies it as a light. Allows to add ambient light.
    /// </summary>
    [Serializable]
    public sealed partial class SkyLight : Light
    {
        /// <summary>
        /// Creates new <see cref="SkyLight"/> object.
        /// </summary>
        private SkyLight() : base()
        {
        }

        /// <summary>
        /// Creates new instance of <see cref="SkyLight"/> object.
        /// </summary>
        /// <returns>Created object.</returns>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public static SkyLight New()
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            return Internal_Create(typeof(SkyLight)) as SkyLight;
#endif
        }

        /// <summary>
        /// Gets or sets the additional color to add. Source texture colors are sumed with it. Can be used to apply custom ambient color.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(21), DefaultValue(typeof(Color), "0,0,0,1"), EditorDisplay("Light"), Tooltip("Additional color to add. Source texture colors are sumed with it. Can be used to apply custom ambient color.")]
        public Color AdditiveColor
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { Color resultAsRef; Internal_GetAdditiveColor(unmanagedPtr, out resultAsRef); return resultAsRef; }
            set { Internal_SetAdditiveColor(unmanagedPtr, ref value); }
#endif
        }

        /// <summary>
        /// Gets or sets light radius.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(29), DefaultValue(1000000.0f), Limit(0), EditorDisplay("Light"), Tooltip("Light range (in world units). Use very high value to apply light globally.")]
        public float Radius
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetRadius(unmanagedPtr); }
            set { Internal_SetRadius(unmanagedPtr, value); }
#endif
        }

        /// <summary>
        /// Gets or sets the sky light source mode.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(40), DefaultValue(Modes.CustomTexture), EditorDisplay("Probe"), Tooltip("Sky light source mode")]
        public Modes Mode
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetMode(unmanagedPtr); }
            set { Internal_SetMode(unmanagedPtr, value); }
#endif
        }

        /// <summary>
        /// Gets or sets the distance from the light at which any geometry should be treated as part of the sky.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(45), DefaultValue(150000.0f), Limit(0), EditorDisplay("Probe"), Tooltip("Distance from the light at which any geometry should be treated as part of the sky.")]
        public float SkyDistanceThreshold
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetSkyDistanceThreshold(unmanagedPtr); }
            set { Internal_SetSkyDistanceThreshold(unmanagedPtr, value); }
#endif
        }

        /// <summary>
        /// Gets or sets the custom cube texture to be used during sky light rendering. Used only if Mode is set to CustomTexture.
        /// </summary>
        [UnmanagedCall]
        [EditorOrder(50), DefaultValue(null), EditorDisplay("Probe"), Tooltip("Custom light texture. Used only if Mode is set to CustomTexture")]
        public CubeTexture CustomTexture
        {
#if UNIT_TEST_COMPILANT
            get; set;
#else
            get { return Internal_GetCustomTexture(unmanagedPtr); }
            set { Internal_SetCustomTexture(unmanagedPtr, FlaxEngine.Object.GetUnmanagedPtr(value)); }
#endif
        }

        /// <summary>
        /// Requests probe texture baking. It won't be performed now but on async graphics rendering task.
        /// </summary>
#if UNIT_TEST_COMPILANT
        [Obsolete("Unit tests, don't support methods calls.")]
#endif
        [UnmanagedCall]
        public void Bake()
        {
#if UNIT_TEST_COMPILANT
            throw new NotImplementedException("Unit tests, don't support methods calls. Only properties can be get or set.");
#else
            Internal_Bake(unmanagedPtr);
#endif
        }

        #region Internal Calls

#if !UNIT_TEST_COMPILANT
        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_GetAdditiveColor(IntPtr obj, out Color resultAsRef);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetAdditiveColor(IntPtr obj, ref Color val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern float Internal_GetRadius(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetRadius(IntPtr obj, float val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern Modes Internal_GetMode(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetMode(IntPtr obj, Modes val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern float Internal_GetSkyDistanceThreshold(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetSkyDistanceThreshold(IntPtr obj, float val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern CubeTexture Internal_GetCustomTexture(IntPtr obj);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_SetCustomTexture(IntPtr obj, IntPtr val);

        [MethodImpl(MethodImplOptions.InternalCall)]
        internal static extern void Internal_Bake(IntPtr obj);
#endif

        #endregion
    }
}
